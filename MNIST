import numpy as np
from tensorflow import keras
from tensorflow.keras import layers

num_classes = 10
input_shape = (28, 28, 1)
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
x_train = np.expand_dims(x_train, -1)
x_test = np.expand_dims(x_test, -1)
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = keras.Sequential([keras.Input(shape=input_shape),                                   # 初始化
                          layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),         # 设置卷积核的数目为64，卷积窗口大小为3*3
                          layers.Flatten(),                                                 # 压平输入，用于卷积层到全连接层的过度
                          layers.Dropout(0.5),                                              # 防止过拟合，断开50%的神经元
                          layers.Dense(num_classes, activation='softmax'), ])               # 全连接层，

print(model.summary())
batch_size = 128
epochs = 15                                                                                 # 15轮之后accuracy无明显上升
# 对模型追加参数设置，设置损失函数（即通过何种数学方法判断结果与真实情况是否贴切），这里选用的是交叉熵损失函数。然后是优化器，这里是选用了adam，最后是以准确率为训练指标
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.1)     # 跑模型
score = model.evaluate(x_test, y_test, verbose=2)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
